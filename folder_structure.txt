/backend
├── /config
│   ├── db.js                  # Database connection setup (MongoDB)
│   ├── oauth.js               # Google OAuth 2.0 credentials and setup
│   ├── email.js               # Email configuration (Gmail API, SMTP, etc.)
│   └── config.js              # Global config variables (app secret, etc.)
│
├── /controllers
│   ├── authController.js      # User authentication (login, registration)
│   ├── therapistController.js # Therapist-specific routes (e.g., approval, adding clients)
│   ├── clientController.js    # Client-specific routes (e.g., booking appointments)
│   ├── calendarController.js  # Google Calendar API integration
│   └── emailController.js     # Handling emails (sending, scheduling, etc.)
│
├── /models
│   ├── User.js                # User model (Admin, Therapist, Client)
│   ├── Client.js              # Client model (students)
│   ├── Appointment.js         # Appointment model (for booked slots)
│   └── EmailSchedule.js       # Email scheduling model (if needed for reminders)
│
├── /routes
│   ├── authRoutes.js          # Routes related to authentication (login, registration)
│   ├── therapistRoutes.js     # Routes for therapist-specific actions
│   ├── clientRoutes.js        # Routes for client/student actions (booking, selecting slots)
│   ├── calendarRoutes.js      # Routes for Google Calendar-related actions (event creation, Meet link generation)
│   └── emailRoutes.js         # Routes for handling email communication (send, schedule)
│
├── /middlewares
│   ├── authMiddleware.js      # Middleware for checking if the user is authenticated
│   ├── roleMiddleware.js      # Middleware for checking user roles (admin, therapist, client)
│   └── errorMiddleware.js     # Error handling middleware
│
├── /services
│   ├── googleService.js       # Logic for interacting with Google APIs (Calendar, Gmail)
│   ├── emailService.js        # Logic for scheduling and sending emails
│   └── appointmentService.js  # Logic for managing appointments and availability
│
├── /utils
│   ├── generateMeetLink.js    # Helper function for generating Google Meet links
│   ├── tokenUtils.js          # Helper functions for generating/validating tokens (JWT, OAuth tokens)
│   └── dateUtils.js           # Helper functions for handling dates and times (time zone adjustments, etc.)
│
├── /validators
│   ├── authValidator.js       # Request validation for authentication (login, register)
│   ├── therapistValidator.js  # Validation for therapist-related actions (approval, adding clients)
│   ├── clientValidator.js     # Validation for client booking and information
│   ├── appointmentValidator.js# Validation for appointment booking
│   └── emailValidator.js      # Validation for email sending (proper email format, etc.)
│
├── /views
│   ├── emailTemplates/        # Folder for storing email templates (HTML, text)
│   └── errorPages/            # Error handling pages (if needed for server errors)
│
├── /public                    # Static files (optional, if you need to serve images, JS, CSS)
│
├── /logs                      # Log files (for debugging, error tracking, etc.)
│
├── app.js                     # Main entry point (Express app setup)
└── .env                        # Environment variables (e.g., DB credentials, API keys)


postchasunaclasses@gmail.com

I am creating a node js express app. The flow is as follows. A user signs up. Their account is pending approval from the admin at which point the account is confirmed. I want the only login option to be done with google so that I can send emails from their gmail account and schedule events on their calendar, even after they log out. The flow is as follows. A user/teacher adds a new student to their list. They can schedule 3 emails at that point; two months six months and a year. Those emails are sent to themselves (from the admin/system/master email) at those designated times to remind them to take action, sending a questionnaire to the specific student. Once they get the email, they login in to their account (with Google) and build the questionnaire from a template and modify it. Also, they choose times from a calendar for the student to speak if they want to. Once they finish building the questionnaire, they press send email. This should send an email from the teacher/user's personal gmail account to the students email with a link to the questionnaire which will bring them back to the website. At the top of the questionnaire will be the options for the meeting that were proposed by the teacher. Once the student selects a time and clicks the schedule a meeting button, I want an event to be scheduled on the google calendar of the teacher and an email sent both to the teacher and student. Once they finish filling out the questionnaire, the teacher should be informed by email (from the system) that they did so.


To implement this flow in a Node.js Express app, you need to integrate multiple Google APIs (for Gmail and Google Calendar), implement a sign-up process with Google login, handle email scheduling, and automate event scheduling. Here’s a structured approach to build this system:

### 1. **Google Login Authentication**:
   - Use **Google OAuth 2.0** for authentication. This will allow users to sign in with their Google account and give you access to Gmail (for sending emails) and Google Calendar (for scheduling events).
   - Use the `passport-google-oauth20` strategy in **Passport.js** to manage the login flow.

### 2. **User Signup & Approval Process**:
   - When a user signs up, their account is in a "pending" state. You can store this in a database with a `status` field (e.g., `pending`, `approved`).
   - An admin can approve the user. Once approved, the user can fully access their account and be able to send emails or schedule events.

### 3. **Email Scheduling**:
   - The teacher can add a student, and at that point, the system can schedule emails for the teacher. You can use a task scheduling library like **node-schedule** to handle the emails.
   - Set up the scheduled emails to be sent at the required times (e.g., 2 months, 6 months, and 1 year after the student is added).

### 4. **Google API Integration**:
   - **Gmail API**: To send emails from the user’s Gmail account. You will need to authenticate and store the user's OAuth tokens to allow sending emails.
   - **Google Calendar API**: To schedule meetings with the student. This will require the teacher’s Google Calendar OAuth tokens to create events.

### 5. **Building the Questionnaire**:
   - Create a form-based interface where the teacher can select or modify a questionnaire template and send it to the student.
   - After the teacher completes and sends the email, the system will send the email to the student with a link to the questionnaire on the website.

### 6. **Student Scheduling**:
   - The student will receive an email with the link to the questionnaire, and at the top of the page, they will see the proposed meeting times.
   - Upon selecting a time, the system will create an event on the teacher’s Google Calendar and notify both the teacher and the student via email.

### 7. **Notification to Teacher**:
   - After the student fills out the questionnaire, an email notification will be sent to the teacher informing them that the questionnaire has been completed.

---

### High-Level Code Example:

#### Step 1: Google OAuth2 Integration (Using Passport.js)
You will need to integrate Google login using the `passport-google-oauth20` strategy. Here's an example of how to set up Google login:

```javascript
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;

passport.use(new GoogleStrategy({
    clientID: 'YOUR_GOOGLE_CLIENT_ID',
    clientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',
    callbackURL: 'http://localhost:3000/auth/google/callback'
}, (accessToken, refreshToken, profile, done) => {
    // Save user profile and tokens in the database
    User.findOrCreate({ googleId: profile.id }, { accessToken, refreshToken, profile }, (err, user) => {
        return done(err, user);
    });
}));

// Routes for Google OAuth2
app.get('/auth/google',
    passport.authenticate('google', { scope: ['https://www.googleapis.com/auth/gmail.send', 'https://www.googleapis.com/auth/calendar'] })
);

app.get('/auth/google/callback', 
    passport.authenticate('google', { failureRedirect: '/' }),
    (req, res) => {
        // Successful login, redirect to dashboard
        res.redirect('/dashboard');
    }
);
```

#### Step 2: Scheduling Emails (Using Node-Schedule)
Use the **node-schedule** package to schedule emails at specific times:

```javascript
const schedule = require('node-schedule');

// Schedule email to be sent 2 months after student is added
const emailJob = schedule.scheduleJob('0 0 1 */2 *', () => {
    sendEmailToTeacher();
});

function sendEmailToTeacher() {
    // Send email using Gmail API
    const email = {
        to: 'teacher_email@gmail.com',
        subject: 'Reminder to Take Action',
        body: 'Reminder to complete a questionnaire for your student.'
    };

    sendEmailWithGmailAPI(email);
}
```

#### Step 3: Sending Email with Gmail API
Use the **Google Gmail API** to send emails using the authenticated user’s Gmail account:

```javascript
const { google } = require('googleapis');

const sendEmailWithGmailAPI = async (email) => {
    const oauth2Client = new google.auth.OAuth2(
        'YOUR_GOOGLE_CLIENT_ID',
        'YOUR_GOOGLE_CLIENT_SECRET',
        'YOUR_REDIRECT_URI'
    );
    
    oauth2Client.setCredentials({ access_token: 'USER_ACCESS_TOKEN' });

    const gmail = google.gmail({ version: 'v1', auth: oauth2Client });

    const rawMessage = createEmailMessage(email);

    await gmail.users.messages.send({
        userId: 'me',
        requestBody: {
            raw: rawMessage
        }
    });
};

function createEmailMessage({ to, subject, body }) {
    const message = [
        `Content-Type: text/plain; charset="UTF-8"`,
        `MIME-Version: 1.0`,
        `Content-Transfer-Encoding: 7bit`,
        `to: ${to}`,
        `subject: ${subject}`,
        ``,
        `${body}`
    ].join('\n');

    return Buffer.from(message).toString('base64');
}
```

#### Step 4: Scheduling Google Calendar Events
Use the **Google Calendar API** to create an event on the teacher’s calendar:

```javascript
const { google } = require('googleapis');

const scheduleMeetingOnCalendar = async (teacherAccessToken, meetingTime) => {
    const oauth2Client = new google.auth.OAuth2(
        'YOUR_GOOGLE_CLIENT_ID',
        'YOUR_GOOGLE_CLIENT_SECRET',
        'YOUR_REDIRECT_URI'
    );
    
    oauth2Client.setCredentials({ access_token: teacherAccessToken });

    const calendar = google.calendar({ version: 'v3', auth: oauth2Client });

    const event = {
        summary: 'Meeting with Student',
        location: 'Online',
        description: 'Discussion about the questionnaire.',
        start: {
            dateTime: meetingTime,
            timeZone: 'America/Los_Angeles',
        },
        end: {
            dateTime: new Date(meetingTime.getTime() + 60 * 60 * 1000), // 1 hour duration
            timeZone: 'America/Los_Angeles',
        },
        attendees: [
            { email: 'student_email@gmail.com' },
            { email: 'teacher_email@gmail.com' },
        ],
    };

    await calendar.events.insert({
        calendarId: 'primary',
        resource: event,
    });
};
```

#### Step 5: Notification to Teacher After Questionnaire Completion
When the student submits the completed questionnaire, you can send an email to the teacher using the system email.

```javascript
const sendNotificationToTeacher = async (teacherEmail, studentName) => {
    const email = {
        to: teacherEmail,
        subject: `Questionnaire Completed by ${studentName}`,
        body: `The student has completed the questionnaire. You can review it now.`
    };

    sendEmailWithGmailAPI(email);
};
```

### 8. **Frontend**: React/HTML Forms
- The frontend will need pages where the teacher can select times for meetings, build the questionnaire, and send it to the student.
- You can use **React.js** or simple HTML forms to interact with the backend API that sends emails and manages calendar events.

---

### Additional Notes:
- You will need to store and manage user tokens securely (especially the OAuth tokens for Gmail and Calendar).
- For email scheduling, **node-schedule** can handle sending reminders at the right times.
- Ensure you have error handling for failed email sends, API issues, and edge cases like expired tokens.
- Consider using **Redis** or a similar queue for task scheduling if you need higher scalability.

By following this structure, you can build a fully automated system where teachers can manage their students, schedule meetings, and interact with Google’s APIs to send emails and manage calendar events.

